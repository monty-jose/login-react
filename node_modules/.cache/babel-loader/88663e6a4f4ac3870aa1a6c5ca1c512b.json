{"ast":null,"code":"import _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\Walle\\\\walle-fe-web\\\\trunk\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\Walle\\\\walle-fe-web\\\\trunk\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { API_BASE_URL, SESSION_STORAGE_USER_KEY } from '../../../../config/api';\nimport SessionStorageService from '../../../../auth/services/SessionStorageService';\n\nvar UsersService = /*#__PURE__*/function () {\n  function UsersService() {\n    _classCallCheck(this, UsersService);\n  }\n\n  _createClass(UsersService, null, [{\n    key: \"createHeaders\",\n    value: function createHeaders() {\n      // 1. Create \"regular\" headers\n      var headers = {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }; // 2. GET the data from the Session Storage\n\n      var userData = SessionStorageService.get(SESSION_STORAGE_USER_KEY); // 3. Try to read the api token and then create the \"Authorization\" header\n\n      if (!!userData && typeof userData.token === 'string') {\n        headers['Authorization'] = \"Bearer \" + userData['token'];\n      }\n\n      console.log('UsersService >> createHeaders()', headers['Authorization']);\n      return headers;\n    } // data: FormData (https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n\n  }, {\n    key: \"createUser\",\n    value: function createUser(data) {\n      var url = \"\".concat(API_BASE_URL, \"/users\");\n      return axios.request({\n        url: url,\n        method: 'post',\n        headers: this.createHeaders(),\n        data: {\n          name: data.get('name'),\n          username: data.get('username'),\n          email: data.get('email'),\n          password: data.get('password')\n        }\n      });\n    }\n  }, {\n    key: \"updateUserStatus\",\n    value: function updateUserStatus(user) {\n      if (typeof user === 'undefined') {\n        throw new Error('No user ID was provided on deleteUser method');\n      }\n\n      var url = \"\".concat(API_BASE_URL, \"/users/\").concat(user.id, \"/status\");\n      return axios.request({\n        url: url,\n        method: 'put',\n        headers: this.createHeaders(),\n        data: {\n          status: user.status\n        }\n      });\n    }\n  }, {\n    key: \"getAllUsers\",\n    value: function getAllUsers() {\n      var url = \"\".concat(API_BASE_URL, \"/users\");\n      return axios.request({\n        url: url,\n        method: 'get',\n        headers: this.createHeaders(),\n        data: {} // Important: keep data empty so the header \"Content-Type\" is not removed\n\n      });\n    }\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(user) {\n      if (typeof user === 'undefined') {\n        throw new Error('No user ID was provided on deleteUser method');\n      }\n\n      var url = \"\".concat(API_BASE_URL, \"/users/\").concat(user.id);\n      return axios.request({\n        url: url,\n        method: 'delete',\n        headers: this.createHeaders(),\n        data: {} // Important: keep data empty so the header \"Content-Type\" is not removed\n\n      });\n    }\n  }]);\n\n  return UsersService;\n}();\n\nexport default UsersService;","map":{"version":3,"sources":["C:/xampp/htdocs/Walle/walle-fe-web/trunk/src/components/private/users/services/UsersService.js"],"names":["axios","API_BASE_URL","SESSION_STORAGE_USER_KEY","SessionStorageService","UsersService","headers","userData","get","token","console","log","data","url","request","method","createHeaders","name","username","email","password","user","Error","id","status"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,EAAsBC,wBAAtB,QAAqD,wBAArD;AACA,OAAOC,qBAAP,MACO,iDADP;;IAGMC,Y;;;;;;;oCAEmB;AAErB;AACA,UAAMC,OAAO,GAAG;AACd,wBAAgB,kBADF;AAEd,4BAAoB;AAFN,OAAhB,CAHqB,CAQrB;;AACA,UAAMC,QAAQ,GAAGH,qBAAqB,CAACI,GAAtB,CAA0BL,wBAA1B,CAAjB,CATqB,CAWrB;;AACA,UAAI,CAAC,CAACI,QAAF,IAAc,OAAOA,QAAQ,CAACE,KAAhB,KAA0B,QAA5C,EAAsD;AACpDH,QAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAUC,QAAQ,CAAC,OAAD,CAA7C;AACD;;AAEDG,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CL,OAAO,CAAC,eAAD,CAAtD;AAEA,aAAOA,OAAP;AAED,K,CAED;;;;+BACkBM,I,EAAM;AACtB,UAAMC,GAAG,aAAMX,YAAN,WAAT;AAEA,aAAOD,KAAK,CAACa,OAAN,CAAc;AACnBD,QAAAA,GAAG,EAAEA,GADc;AAEnBE,QAAAA,MAAM,EAAE,MAFW;AAGnBT,QAAAA,OAAO,EAAE,KAAKU,aAAL,EAHU;AAInBJ,QAAAA,IAAI,EAAE;AACJK,UAAAA,IAAI,EAAEL,IAAI,CAACJ,GAAL,CAAS,MAAT,CADF;AAEJU,UAAAA,QAAQ,EAAEN,IAAI,CAACJ,GAAL,CAAS,UAAT,CAFN;AAGJW,UAAAA,KAAK,EAAEP,IAAI,CAACJ,GAAL,CAAS,OAAT,CAHH;AAIJY,UAAAA,QAAQ,EAAER,IAAI,CAACJ,GAAL,CAAS,UAAT;AAJN;AAJa,OAAd,CAAP;AAWD;;;qCAEuBa,I,EAAM;AAE5B,UAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B,cAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,UAAMT,GAAG,aAAMX,YAAN,oBAA4BmB,IAAI,CAACE,EAAjC,YAAT;AAEA,aAAOtB,KAAK,CAACa,OAAN,CAAc;AACnBD,QAAAA,GAAG,EAAEA,GADc;AAEnBE,QAAAA,MAAM,EAAE,KAFW;AAGnBT,QAAAA,OAAO,EAAE,KAAKU,aAAL,EAHU;AAInBJ,QAAAA,IAAI,EAAE;AACJY,UAAAA,MAAM,EAAEH,IAAI,CAACG;AADT;AAJa,OAAd,CAAP;AAQD;;;kCAEoB;AACnB,UAAMX,GAAG,aAAMX,YAAN,WAAT;AAEA,aAAOD,KAAK,CAACa,OAAN,CAAc;AACnBD,QAAAA,GAAG,EAAEA,GADc;AAEnBE,QAAAA,MAAM,EAAE,KAFW;AAGnBT,QAAAA,OAAO,EAAE,KAAKU,aAAL,EAHU;AAInBJ,QAAAA,IAAI,EAAE,EAJa,CAIV;;AAJU,OAAd,CAAP;AAMD;;;+BAEiBS,I,EAAM;AAEtB,UAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B,cAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,UAAMT,GAAG,aAAMX,YAAN,oBAA4BmB,IAAI,CAACE,EAAjC,CAAT;AACA,aAAOtB,KAAK,CAACa,OAAN,CAAc;AACnBD,QAAAA,GAAG,EAAEA,GADc;AAEnBE,QAAAA,MAAM,EAAE,QAFW;AAGnBT,QAAAA,OAAO,EAAE,KAAKU,aAAL,EAHU;AAInBJ,QAAAA,IAAI,EAAE,EAJa,CAIV;;AAJU,OAAd,CAAP;AAMD;;;;;;AAGH,eAAeP,YAAf","sourcesContent":["import axios from 'axios';\nimport {API_BASE_URL, SESSION_STORAGE_USER_KEY} from '../../../../config/api';\nimport SessionStorageService\n  from '../../../../auth/services/SessionStorageService';\n\nclass UsersService {\n\n  static createHeaders() {\n\n    // 1. Create \"regular\" headers\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n    };\n\n    // 2. GET the data from the Session Storage\n    const userData = SessionStorageService.get(SESSION_STORAGE_USER_KEY);\n\n    // 3. Try to read the api token and then create the \"Authorization\" header\n    if (!!userData && typeof userData.token === 'string') {\n      headers['Authorization'] = \"Bearer \"+userData['token'];\n    }\n\n    console.log('UsersService >> createHeaders()', headers['Authorization']);\n\n    return headers;\n\n  }\n\n  // data: FormData (https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n  static createUser(data) {\n    const url = `${API_BASE_URL}/users`;\n\n    return axios.request({\n      url: url,\n      method: 'post',\n      headers: this.createHeaders(),\n      data: {\n        name: data.get('name'),\n        username: data.get('username'),\n        email: data.get('email'),\n        password: data.get('password'),\n      },\n    });\n  }\n\n  static updateUserStatus(user) {\n\n    if (typeof user === 'undefined') {\n      throw new Error('No user ID was provided on deleteUser method');\n    }\n\n    const url = `${API_BASE_URL}/users/${user.id}/status`;\n\n    return axios.request({\n      url: url,\n      method: 'put',\n      headers: this.createHeaders(),\n      data: {\n        status: user.status,\n      },\n    });\n  }\n\n  static getAllUsers() {\n    const url = `${API_BASE_URL}/users`;\n\n    return axios.request({\n      url: url,\n      method: 'get',\n      headers: this.createHeaders(),\n      data: {},// Important: keep data empty so the header \"Content-Type\" is not removed\n    });\n  }\n\n  static deleteUser(user) {\n\n    if (typeof user === 'undefined') {\n      throw new Error('No user ID was provided on deleteUser method');\n    }\n\n    const url = `${API_BASE_URL}/users/${user.id}`;\n    return axios.request({\n      url: url,\n      method: 'delete',\n      headers: this.createHeaders(),\n      data: {},// Important: keep data empty so the header \"Content-Type\" is not removed\n    });\n  }\n}\n\nexport default UsersService;\n"]},"metadata":{},"sourceType":"module"}