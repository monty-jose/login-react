{"ast":null,"code":"import _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\Walle\\\\walle-fe-web\\\\trunk\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\Walle\\\\walle-fe-web\\\\trunk\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { API_BASE_URL, SESSION_STORAGE_USER_KEY } from '../../config/api';\nimport axios from 'axios';\nimport SessionStorageService from './SessionStorageService';\n\nvar AuthenticationService = /*#__PURE__*/function () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, null, [{\n    key: \"login\",\n    value: function login(username, password) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        var headers = {\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest'\n        };\n        var requestURL = \"\".concat(API_BASE_URL, \"/users/login\");\n        var requestData = {\n          username: username,\n          password: password\n        };\n        var requestConfig = {\n          headers: headers\n        }; // let userData = \"token\";\n        // SessionStorageService.set(SESSION_STORAGE_USER_KEY, userData);\n        // resolve(userData);\n\n        axios.post(requestURL, requestData, requestConfig).then(function (response) {\n          var userData = response.data;\n          _this.isAuthenticated = true;\n          _this.userData = userData;\n          SessionStorageService.set(SESSION_STORAGE_USER_KEY, userData);\n          resolve(userData);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"isUserAuthenticated\",\n    value: function isUserAuthenticated() {\n      var userData = SessionStorageService.get(SESSION_STORAGE_USER_KEY);\n      console.log('isUserAuthenticated', userData); // this.isAuthenticated = (!!userData && typeof userData.token ===\n      //     'string');\n\n      this.isAuthenticated = !!userData;\n      return this.isAuthenticated;\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.isAuthenticated = false;\n        SessionStorageService.remove(SESSION_STORAGE_USER_KEY);\n        resolve(); // TODO: Do you want to do something in the backend?\n        // Then send a request here to logout\n      });\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nAuthenticationService.isAuthenticated = false;\nexport default AuthenticationService;","map":{"version":3,"sources":["C:/xampp/htdocs/Walle/walle-fe-web/trunk/src/auth/services/AuthenticationService.js"],"names":["API_BASE_URL","SESSION_STORAGE_USER_KEY","axios","SessionStorageService","AuthenticationService","username","password","Promise","resolve","reject","headers","requestURL","requestData","requestConfig","post","then","response","userData","data","isAuthenticated","set","catch","error","get","console","log","remove"],"mappings":";;AAAA,SAAQA,YAAR,EAAsBC,wBAAtB,QAAqD,kBAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;IAEMC,qB;;;;;;;0BAKSC,Q,EAAUC,Q,EAAU;AAAA;;AAC/B,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEtC,YAAMC,OAAO,GAAG;AACd,0BAAgB,kBADF;AAEd,8BAAoB;AAFN,SAAhB;AAKA,YAAMC,UAAU,aAAMX,YAAN,iBAAhB;AACA,YAAMY,WAAW,GAAG;AAACP,UAAAA,QAAQ,EAAEA,QAAX;AAAqBC,UAAAA,QAAQ,EAAEA;AAA/B,SAApB;AACA,YAAMO,aAAa,GAAG;AAACH,UAAAA,OAAO,EAAEA;AAAV,SAAtB,CATsC,CAWtC;AACA;AACA;;AACAR,QAAAA,KAAK,CAACY,IAAN,CAAWH,UAAX,EAAuBC,WAAvB,EAAoCC,aAApC,EAAmDE,IAAnD,CAAwD,UAACC,QAAD,EAAc;AAEpE,cAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAA1B;AACA,UAAA,KAAI,CAACC,eAAL,GAAuB,IAAvB;AACA,UAAA,KAAI,CAACF,QAAL,GAAgBA,QAAhB;AAEAd,UAAAA,qBAAqB,CAACiB,GAAtB,CAA0BnB,wBAA1B,EAAoDgB,QAApD;AAEAT,UAAAA,OAAO,CAACS,QAAD,CAAP;AAED,SAVD,EAUGI,KAVH,CAUS,UAAAC,KAAK;AAAA,iBAAIb,MAAM,CAACa,KAAD,CAAV;AAAA,SAVd;AAWD,OAzBM,CAAP;AA0BD;;;0CAE4B;AAC3B,UAAML,QAAQ,GAAGd,qBAAqB,CAACoB,GAAtB,CAA0BtB,wBAA1B,CAAjB;AAEAuB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCR,QAAnC,EAH2B,CAK3B;AACA;;AACA,WAAKE,eAAL,GAAwB,CAAC,CAACF,QAA1B;AAEA,aAAO,KAAKE,eAAZ;AACD;;;6BAEe;AAAA;;AAEd,aAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAA,MAAI,CAACU,eAAL,GAAuB,KAAvB;AACAhB,QAAAA,qBAAqB,CAACuB,MAAtB,CAA6BzB,wBAA7B;AACAO,QAAAA,OAAO,GAH+B,CAKtC;AACA;AACD,OAPM,CAAP;AASD;;;;;;AAzDGJ,qB,CAEGe,e,GAAkB,K;AA2D3B,eAAef,qBAAf","sourcesContent":["import {API_BASE_URL, SESSION_STORAGE_USER_KEY} from '../../config/api';\nimport axios from 'axios';\nimport SessionStorageService from './SessionStorageService';\n\nclass AuthenticationService {\n\n  static isAuthenticated = false;\n  static userData;\n\n  static login(username, password) {\n    return new Promise((resolve, reject) => {\n\n      const headers = {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest',\n      };\n\n      const requestURL = `${API_BASE_URL}/users/login`;\n      const requestData = {username: username, password: password};\n      const requestConfig = {headers: headers};\n\n      // let userData = \"token\";\n      // SessionStorageService.set(SESSION_STORAGE_USER_KEY, userData);\n      // resolve(userData);\n      axios.post(requestURL, requestData, requestConfig).then((response) => {\n\n        const userData = response.data;\n        this.isAuthenticated = true;\n        this.userData = userData;\n\n        SessionStorageService.set(SESSION_STORAGE_USER_KEY, userData);\n\n        resolve(userData);\n\n      }).catch(error => reject(error));\n    });\n  }\n\n  static isUserAuthenticated() {\n    const userData = SessionStorageService.get(SESSION_STORAGE_USER_KEY);\n\n    console.log('isUserAuthenticated', userData);\n\n    // this.isAuthenticated = (!!userData && typeof userData.token ===\n    //     'string');\n    this.isAuthenticated = (!!userData);\n\n    return this.isAuthenticated;\n  }\n\n  static logout() {\n\n    return new Promise((resolve, reject) => {\n      this.isAuthenticated = false;\n      SessionStorageService.remove(SESSION_STORAGE_USER_KEY);\n      resolve();\n\n      // TODO: Do you want to do something in the backend?\n      // Then send a request here to logout\n    });\n\n  }\n\n}\n\nexport default AuthenticationService;\n"]},"metadata":{},"sourceType":"module"}